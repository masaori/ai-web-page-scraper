// This file is generated by scripts/generateInterfaceRepositories.ts
import { PromisedResult, UnknownRuntimeError } from '../../../_shared/error'
import { ActionPlan } from '../../entities/ActionPlan'
import { ActionPlanAppendSheetToSpreadsheet } from '../../entities/ActionPlanAppendSheetToSpreadsheet'
import { ActionPlanClick } from '../../entities/ActionPlanClick'
import { ActionPlanCollectData } from '../../entities/ActionPlanCollectData'
import { ActionPlanCreateSpreadsheet } from '../../entities/ActionPlanCreateSpreadsheet'
import { ActionPlanObserveWebPage } from '../../entities/ActionPlanObserveWebPage'
import { CollectedData } from '../../entities/CollectedData'
import { UserRequest } from '../../entities/UserRequest'
import { WebPage } from '../../entities/WebPage'
import { WebPageElement } from '../../entities/WebPageElement'
import { WebPageElementPageLink } from '../../entities/WebPageElementPageLink'
import { WebPageElementText } from '../../entities/WebPageElementText'

export interface ActionPlanRepository {
  getAll: () => PromisedResult<ActionPlan[], UnknownRuntimeError>
  getRelevant: (text: string, limit: number) => PromisedResult<ActionPlan[], UnknownRuntimeError>
  create: (entity: ActionPlan) => PromisedResult<ActionPlan, UnknownRuntimeError>
  update: (entity: ActionPlan) => PromisedResult<ActionPlan, UnknownRuntimeError>
  delete: (id: string) => PromisedResult<void, UnknownRuntimeError>
  getById: (id: string) => PromisedResult<ActionPlan | null, UnknownRuntimeError>
  getAllByUserRequestId: (UserRequestId: UserRequest['id']) => PromisedResult<ActionPlan[], UnknownRuntimeError>
}

export interface ActionPlanAppendSheetToSpreadsheetRepository {
  getAll: () => PromisedResult<ActionPlanAppendSheetToSpreadsheet[], UnknownRuntimeError>
  getRelevant: (text: string, limit: number) => PromisedResult<ActionPlanAppendSheetToSpreadsheet[], UnknownRuntimeError>
  create: (entity: ActionPlanAppendSheetToSpreadsheet) => PromisedResult<ActionPlanAppendSheetToSpreadsheet, UnknownRuntimeError>
  update: (entity: ActionPlanAppendSheetToSpreadsheet) => PromisedResult<ActionPlanAppendSheetToSpreadsheet, UnknownRuntimeError>
  delete: (id: string) => PromisedResult<void, UnknownRuntimeError>
  getByActionPlanId: (ActionPlanId: ActionPlan['id']) => PromisedResult<ActionPlanAppendSheetToSpreadsheet | null, UnknownRuntimeError>
}

export interface ActionPlanClickRepository {
  getAll: () => PromisedResult<ActionPlanClick[], UnknownRuntimeError>
  getRelevant: (text: string, limit: number) => PromisedResult<ActionPlanClick[], UnknownRuntimeError>
  create: (entity: ActionPlanClick) => PromisedResult<ActionPlanClick, UnknownRuntimeError>
  update: (entity: ActionPlanClick) => PromisedResult<ActionPlanClick, UnknownRuntimeError>
  delete: (id: string) => PromisedResult<void, UnknownRuntimeError>
  getByActionPlanId: (ActionPlanId: ActionPlan['id']) => PromisedResult<ActionPlanClick | null, UnknownRuntimeError>
}

export interface ActionPlanCollectDataRepository {
  getAll: () => PromisedResult<ActionPlanCollectData[], UnknownRuntimeError>
  getRelevant: (text: string, limit: number) => PromisedResult<ActionPlanCollectData[], UnknownRuntimeError>
  create: (entity: ActionPlanCollectData) => PromisedResult<ActionPlanCollectData, UnknownRuntimeError>
  update: (entity: ActionPlanCollectData) => PromisedResult<ActionPlanCollectData, UnknownRuntimeError>
  delete: (id: string) => PromisedResult<void, UnknownRuntimeError>
  getByActionPlanId: (ActionPlanId: ActionPlan['id']) => PromisedResult<ActionPlanCollectData | null, UnknownRuntimeError>
}

export interface ActionPlanCreateSpreadsheetRepository {
  getAll: () => PromisedResult<ActionPlanCreateSpreadsheet[], UnknownRuntimeError>
  getRelevant: (text: string, limit: number) => PromisedResult<ActionPlanCreateSpreadsheet[], UnknownRuntimeError>
  create: (entity: ActionPlanCreateSpreadsheet) => PromisedResult<ActionPlanCreateSpreadsheet, UnknownRuntimeError>
  update: (entity: ActionPlanCreateSpreadsheet) => PromisedResult<ActionPlanCreateSpreadsheet, UnknownRuntimeError>
  delete: (id: string) => PromisedResult<void, UnknownRuntimeError>
  getByActionPlanId: (ActionPlanId: ActionPlan['id']) => PromisedResult<ActionPlanCreateSpreadsheet | null, UnknownRuntimeError>
}

export interface ActionPlanObserveWebPageRepository {
  getAll: () => PromisedResult<ActionPlanObserveWebPage[], UnknownRuntimeError>
  getRelevant: (text: string, limit: number) => PromisedResult<ActionPlanObserveWebPage[], UnknownRuntimeError>
  create: (entity: ActionPlanObserveWebPage) => PromisedResult<ActionPlanObserveWebPage, UnknownRuntimeError>
  update: (entity: ActionPlanObserveWebPage) => PromisedResult<ActionPlanObserveWebPage, UnknownRuntimeError>
  delete: (id: string) => PromisedResult<void, UnknownRuntimeError>
  getByActionPlanId: (ActionPlanId: ActionPlan['id']) => PromisedResult<ActionPlanObserveWebPage | null, UnknownRuntimeError>
}

export interface CollectedDataRepository {
  getAll: () => PromisedResult<CollectedData[], UnknownRuntimeError>
  getRelevant: (text: string, limit: number) => PromisedResult<CollectedData[], UnknownRuntimeError>
  create: (entity: CollectedData) => PromisedResult<CollectedData, UnknownRuntimeError>
  update: (entity: CollectedData) => PromisedResult<CollectedData, UnknownRuntimeError>
  delete: (id: string) => PromisedResult<void, UnknownRuntimeError>
  getById: (id: string) => PromisedResult<CollectedData | null, UnknownRuntimeError>
}

export interface UserRequestRepository {
  getAll: () => PromisedResult<UserRequest[], UnknownRuntimeError>
  getRelevant: (text: string, limit: number) => PromisedResult<UserRequest[], UnknownRuntimeError>
  create: (entity: UserRequest) => PromisedResult<UserRequest, UnknownRuntimeError>
  update: (entity: UserRequest) => PromisedResult<UserRequest, UnknownRuntimeError>
  delete: (id: string) => PromisedResult<void, UnknownRuntimeError>
  getById: (id: string) => PromisedResult<UserRequest | null, UnknownRuntimeError>
}

export interface WebPageRepository {
  getAll: () => PromisedResult<WebPage[], UnknownRuntimeError>
  getRelevant: (text: string, limit: number) => PromisedResult<WebPage[], UnknownRuntimeError>
  create: (entity: WebPage) => PromisedResult<WebPage, UnknownRuntimeError>
  update: (entity: WebPage) => PromisedResult<WebPage, UnknownRuntimeError>
  delete: (id: string) => PromisedResult<void, UnknownRuntimeError>
  getById: (id: string) => PromisedResult<WebPage | null, UnknownRuntimeError>
}

export interface WebPageElementRepository {
  getAll: () => PromisedResult<WebPageElement[], UnknownRuntimeError>
  getRelevant: (text: string, limit: number) => PromisedResult<WebPageElement[], UnknownRuntimeError>
  create: (entity: WebPageElement) => PromisedResult<WebPageElement, UnknownRuntimeError>
  update: (entity: WebPageElement) => PromisedResult<WebPageElement, UnknownRuntimeError>
  delete: (id: string) => PromisedResult<void, UnknownRuntimeError>
  getById: (id: string) => PromisedResult<WebPageElement | null, UnknownRuntimeError>
  getAllByWebPageId: (WebPageId: WebPage['id']) => PromisedResult<WebPageElement[], UnknownRuntimeError>
}

export interface WebPageElementPageLinkRepository {
  getAll: () => PromisedResult<WebPageElementPageLink[], UnknownRuntimeError>
  getRelevant: (text: string, limit: number) => PromisedResult<WebPageElementPageLink[], UnknownRuntimeError>
  create: (entity: WebPageElementPageLink) => PromisedResult<WebPageElementPageLink, UnknownRuntimeError>
  update: (entity: WebPageElementPageLink) => PromisedResult<WebPageElementPageLink, UnknownRuntimeError>
  delete: (id: string) => PromisedResult<void, UnknownRuntimeError>
  getByWebPageElementId: (WebPageElementId: WebPageElement['id']) => PromisedResult<WebPageElementPageLink | null, UnknownRuntimeError>
}

export interface WebPageElementTextRepository {
  getAll: () => PromisedResult<WebPageElementText[], UnknownRuntimeError>
  getRelevant: (text: string, limit: number) => PromisedResult<WebPageElementText[], UnknownRuntimeError>
  create: (entity: WebPageElementText) => PromisedResult<WebPageElementText, UnknownRuntimeError>
  update: (entity: WebPageElementText) => PromisedResult<WebPageElementText, UnknownRuntimeError>
  delete: (id: string) => PromisedResult<void, UnknownRuntimeError>
  getByWebPageElementId: (WebPageElementId: WebPageElement['id']) => PromisedResult<WebPageElementText | null, UnknownRuntimeError>
}
