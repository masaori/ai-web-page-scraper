// This file is generated by scripts/generateVectorDbRepositories.ts
import { ActionPlanObserveWebPage } from '../../../../domain/entities/ActionPlanObserveWebPage'
import { QdrantClient } from '../../../_shared/QdrantClient'
import { OpenAiClient } from '../../../_shared/OpenAiClient'
import { VectorDbRepository } from '../_shared/VectorDbRepository'
/* eslint-disable @typescript-eslint/no-unused-vars, unused-imports/no-unused-imports-ts */
import { PromisedResult, UnknownRuntimeError, unknownRuntimeError } from '../../../../_shared/error'
import { Ok } from '@sniptt/monads'
/* eslint-enable @typescript-eslint/no-unused-vars, unused-imports/no-unused-imports-ts */

const qdrantCollectionName = 'action_plan_observe_web_page'
const isActionPlanObserveWebPage = (entity: unknown): entity is ActionPlanObserveWebPage => {
  return (
    typeof entity === 'object' &&
    entity !== null &&
    'actionPlanId' in entity &&
    typeof entity.actionPlanId === 'string' &&
    'type' in entity &&
    typeof entity.type === 'string' &&
    'url' in entity &&
    typeof entity.url === 'string'
  )
}

export class VectorDbActionPlanObserveWebPageRepository extends VectorDbRepository<'actionPlanId', ActionPlanObserveWebPage> {
  constructor(qdrantClient: QdrantClient, openAiClient: OpenAiClient) {
    super('actionPlanId', qdrantCollectionName, isActionPlanObserveWebPage, qdrantClient, openAiClient)
  }

  getByActionPlanId = async (actionPlanId: string): PromisedResult<ActionPlanObserveWebPage | null, UnknownRuntimeError> => this.getByPrimaryKey(actionPlanId)
}
