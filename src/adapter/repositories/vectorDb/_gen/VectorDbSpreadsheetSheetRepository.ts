// This file is generated by scripts/generateVectorDbRepositories.ts
import { SpreadsheetSheet } from '../../../../domain/entities/SpreadsheetSheet'
import { QdrantClient } from '../../../_shared/QdrantClient'
import { OpenAiClient } from '../../../_shared/OpenAiClient'
import { VectorDbRepository } from '../_shared/VectorDbRepository'
/* eslint-disable @typescript-eslint/no-unused-vars, unused-imports/no-unused-imports-ts */
import { PromisedResult, UnknownRuntimeError, unknownRuntimeError } from '../../../../_shared/error'
import { Ok } from '@sniptt/monads'
/* eslint-enable @typescript-eslint/no-unused-vars, unused-imports/no-unused-imports-ts */

const qdrantCollectionName = 'spreadsheet_sheet'
const isSpreadsheetSheet = (entity: unknown): entity is SpreadsheetSheet => {
  return (
    typeof entity === 'object' &&
    entity !== null &&
    'id' in entity &&
    typeof entity.id === 'string' &&
    'spreadsheetId' in entity &&
    typeof entity.spreadsheetId === 'string' &&
    'collectedDataId' in entity &&
    (typeof entity.collectedDataId === 'string' || entity.collectedDataId === null) &&
    'sheetNumber' in entity &&
    typeof entity.sheetNumber === 'number' &&
    'name' in entity &&
    typeof entity.name === 'string' &&
    'description' in entity &&
    typeof entity.description === 'string'
  )
}

export class VectorDbSpreadsheetSheetRepository extends VectorDbRepository<'id', SpreadsheetSheet> {
  constructor(qdrantClient: QdrantClient, openAiClient: OpenAiClient) {
    super('id', qdrantCollectionName, isSpreadsheetSheet, qdrantClient, openAiClient)
  }

  getById = async (id: string): PromisedResult<SpreadsheetSheet | null, UnknownRuntimeError> => this.getByPrimaryKey(id)

  getAllBySpreadsheetId = async (spreadsheetId: string): PromisedResult<SpreadsheetSheet[], UnknownRuntimeError> =>
    this.getAllByProperty('spreadsheetId', spreadsheetId)

  getByCollectedDataId = async (collectedDataId: string): PromisedResult<SpreadsheetSheet | null, UnknownRuntimeError> =>
    this.getByProperty('collectedDataId', collectedDataId)
}
