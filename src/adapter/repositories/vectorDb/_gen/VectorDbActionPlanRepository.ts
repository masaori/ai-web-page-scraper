// This file is generated by scripts/generateVectorDbRepositories.ts
import { ActionPlan } from '../../../../domain/entities/ActionPlan'
import { QdrantClient } from '../../../_shared/QdrantClient'
import { OpenAiClient } from '../../../_shared/OpenAiClient'
import { VectorDbRepository } from '../_shared/VectorDbRepository'
/* eslint-disable @typescript-eslint/no-unused-vars, unused-imports/no-unused-imports-ts */
import { PromisedResult, UnknownRuntimeError, unknownRuntimeError } from '../../../../_shared/error'
import { Ok } from '@sniptt/monads'
/* eslint-enable @typescript-eslint/no-unused-vars, unused-imports/no-unused-imports-ts */

const qdrantCollectionName = 'action_plan'
const isActionPlan = (entity: unknown): entity is ActionPlan => {
  return (
    typeof entity === 'object' &&
    entity !== null &&
    'id' in entity &&
    typeof entity.id === 'string' &&
    'userRequestId' in entity &&
    typeof entity.userRequestId === 'string' &&
    'type' in entity &&
    typeof entity.type === 'string'
  )
}

export class VectorDbActionPlanRepository extends VectorDbRepository<'id', ActionPlan> {
  constructor(qdrantClient: QdrantClient, openAiClient: OpenAiClient) {
    super('id', qdrantCollectionName, isActionPlan, qdrantClient, openAiClient)
  }

  getById = async (id: string): PromisedResult<ActionPlan | null, UnknownRuntimeError> => this.getByPrimaryKey(id)

  getAllByUserRequestId = async (userRequestId: string): PromisedResult<ActionPlan[], UnknownRuntimeError> =>
    this.getAllByProperty('userRequestId', userRequestId)
}
