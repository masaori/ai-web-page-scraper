// This file is generated by scripts/generateVectorDbRepositories.ts
import { WebPage } from '../../../../domain/entities/WebPage'
import { QdrantClient } from '../../../_shared/QdrantClient'
import { OpenAiClient } from '../../../_shared/OpenAiClient'
import { VectorDbRepository } from '../_shared/VectorDbRepository'
/* eslint-disable @typescript-eslint/no-unused-vars, unused-imports/no-unused-imports-ts */
import { PromisedResult, UnknownRuntimeError, unknownRuntimeError } from '../../../../_shared/error'
import { Ok } from '@sniptt/monads'
/* eslint-enable @typescript-eslint/no-unused-vars, unused-imports/no-unused-imports-ts */

const qdrantCollectionName = 'web_page'
const isWebPage = (entity: unknown): entity is WebPage => {
  return (
    typeof entity === 'object' &&
    entity !== null &&
    'id' in entity &&
    typeof entity.id === 'string' &&
    'url' in entity &&
    typeof entity.url === 'string' &&
    'width' in entity &&
    typeof entity.width === 'number' &&
    'height' in entity &&
    typeof entity.height === 'number'
  )
}

export class VectorDbWebPageRepository extends VectorDbRepository<'id', WebPage> {
  constructor(qdrantClient: QdrantClient, openAiClient: OpenAiClient) {
    super('id', qdrantCollectionName, isWebPage, qdrantClient, openAiClient)
  }

  getById = async (id: string): PromisedResult<WebPage | null, UnknownRuntimeError> => this.getByPrimaryKey(id)
}
