// This file is generated by scripts/generateVectorDbRepositories.ts
import { WebPageElement } from '../../../../domain/entities/WebPageElement'
import { QdrantClient } from '../../../_shared/QdrantClient'
import { OpenAiClient } from '../../../_shared/OpenAiClient'
import { VectorDbRepository } from '../_shared/VectorDbRepository'
/* eslint-disable @typescript-eslint/no-unused-vars, unused-imports/no-unused-imports-ts */
import { PromisedResult, UnknownRuntimeError, unknownRuntimeError } from '../../../../_shared/error'
import { Ok } from '@sniptt/monads'
/* eslint-enable @typescript-eslint/no-unused-vars, unused-imports/no-unused-imports-ts */

const qdrantCollectionName = 'web_page_element'
const isWebPageElement = (entity: unknown): entity is WebPageElement => {
  return (
    typeof entity === 'object' &&
    entity !== null &&
    'id' in entity &&
    typeof entity.id === 'string' &&
    'webPageId' in entity &&
    typeof entity.webPageId === 'string' &&
    'type' in entity &&
    (typeof entity.type === 'string' || entity.type === null) &&
    'top' in entity &&
    typeof entity.top === 'number' &&
    'left' in entity &&
    typeof entity.left === 'number' &&
    'width' in entity &&
    typeof entity.width === 'number' &&
    'height' in entity &&
    typeof entity.height === 'number'
  )
}

export class VectorDbWebPageElementRepository extends VectorDbRepository<'id', WebPageElement> {
  constructor(qdrantClient: QdrantClient, openAiClient: OpenAiClient) {
    super('id', qdrantCollectionName, isWebPageElement, qdrantClient, openAiClient)
  }

  getById = async (id: string): PromisedResult<WebPageElement | null, UnknownRuntimeError> => this.getByPrimaryKey(id)

  getAllByWebPageId = async (webPageId: string): PromisedResult<WebPageElement[], UnknownRuntimeError> => {
    try {
      const scrollResult = await this.qdrantClient.scroll(this.qdrantCollectionName)
      const entities = scrollResult.points
        .map((point) => {
          if (!point.payload) {
            console.error(`[VectorDbWebPageElementRepository] getAllByWebPageId: point.payload is null. Ignored ${point.id}`)

            return null
          }

          return this.isEntityType(point.payload) ? point.payload : null
        })
        .filter((entity): entity is WebPageElement => !!entity && entity.webPageId === webPageId)

      return Ok(entities)
    } catch (e) {
      console.error(`[VectorDbWebPageElementRepository] getAllByWebPageId: ${JSON.stringify(e)}`)

      if (e instanceof Error) {
        return unknownRuntimeError(e.message)
      } else {
        return unknownRuntimeError(JSON.stringify(e))
      }
    }
  }
}
