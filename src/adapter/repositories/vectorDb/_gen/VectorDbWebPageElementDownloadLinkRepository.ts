// This file is generated by scripts/generateVectorDbRepositories.ts
import { WebPageElementDownloadLink } from '../../../../domain/entities/WebPageElementDownloadLink'
import { QdrantClient } from '../../../_shared/QdrantClient'
import { OpenAiClient } from '../../../_shared/OpenAiClient'
import { VectorDbRepository } from '../_shared/VectorDbRepository'
/* eslint-disable @typescript-eslint/no-unused-vars, unused-imports/no-unused-imports-ts */
import { PromisedResult, UnknownRuntimeError, unknownRuntimeError } from '../../../../_shared/error'
import { Ok } from '@sniptt/monads'
/* eslint-enable @typescript-eslint/no-unused-vars, unused-imports/no-unused-imports-ts */

const qdrantCollectionName = 'web_page_element_download_link'
const isWebPageElementDownloadLink = (entity: unknown): entity is WebPageElementDownloadLink => {
  return (
    typeof entity === 'object' &&
    entity !== null &&
    'id' in entity &&
    typeof entity.id === 'string' &&
    'webPageElementId' in entity &&
    typeof entity.webPageElementId === 'string' &&
    'url' in entity &&
    typeof entity.url === 'string' &&
    'fileType' in entity &&
    typeof entity.fileType === 'string'
  )
}

export class VectorDbWebPageElementDownloadLinkRepository extends VectorDbRepository<WebPageElementDownloadLink> {
  constructor(qdrantClient: QdrantClient, openAiClient: OpenAiClient) {
    super(qdrantCollectionName, isWebPageElementDownloadLink, qdrantClient, openAiClient)
  }

  getByWebPageElementId = async (webPageElementId: string): PromisedResult<WebPageElementDownloadLink | null, UnknownRuntimeError> => {
    try {
      const scrollResult = await this.qdrantClient.scroll(this.qdrantCollectionName)
      const entities = scrollResult.points
        .map((point) => {
          if (!point.payload) {
            console.error(`[VectorDbWebPageElementDownloadLinkRepository] getByWebPageElementId: point.payload is null. Ignored ${point.id}`)

            return null
          }

          return this.isEntityType(point.payload) ? point.payload : null
        })
        .filter((entity): entity is WebPageElementDownloadLink => !!entity && entity.webPageElementId === webPageElementId)
      return Ok(entities[0] ?? null)
    } catch (e) {
      console.error(`[VectorDbWebPageElementDownloadLinkRepository] getByWebPageElementId: ${JSON.stringify(e)}`)

      if (e instanceof Error) {
        return unknownRuntimeError(e.message)
      } else {
        return unknownRuntimeError(JSON.stringify(e))
      }
    }
  }
}
