// This file is generated by scripts/generateVectorDbRepositories.ts
import { ActionResultCollectData } from '../../../../domain/entities/ActionResultCollectData'
import { QdrantClient } from '../../../_shared/QdrantClient'
import { OpenAiClient } from '../../../_shared/OpenAiClient'
import { VectorDbRepository } from '../_shared/VectorDbRepository'
/* eslint-disable @typescript-eslint/no-unused-vars, unused-imports/no-unused-imports-ts */
import { PromisedResult, UnknownRuntimeError, unknownRuntimeError } from '../../../../_shared/error'
import { Ok } from '@sniptt/monads'
/* eslint-enable @typescript-eslint/no-unused-vars, unused-imports/no-unused-imports-ts */

const qdrantCollectionName = 'action_result_collect_data'
const isActionResultCollectData = (entity: unknown): entity is ActionResultCollectData => {
  return (
    typeof entity === 'object' &&
    entity !== null &&
    'actionResultId' in entity &&
    typeof entity.actionResultId === 'string' &&
    'type' in entity &&
    typeof entity.type === 'string' &&
    'collectedDataId' in entity &&
    typeof entity.collectedDataId === 'string'
  )
}

export class VectorDbActionResultCollectDataRepository extends VectorDbRepository<'actionResultId', ActionResultCollectData> {
  constructor(qdrantClient: QdrantClient, openAiClient: OpenAiClient) {
    super('actionResultId', qdrantCollectionName, isActionResultCollectData, qdrantClient, openAiClient)
  }

  getByActionResultId = async (actionResultId: string): PromisedResult<ActionResultCollectData | null, UnknownRuntimeError> =>
    this.getByPrimaryKey(actionResultId)
}
