import path from 'path'
import fs from 'fs'
import { getEntityDefinitions } from 'ast-to-entity-definitions/bin/adapter/entry-points/function'
import { snakeCase } from 'change-case'

export const generateInitializeVectorDb = async () => {
  const pathToEntitiesDirectory = path.join(__dirname, '..', 'src', 'domain', 'entities')
  const pathToOutputDirectory = path.join(__dirname, '..', 'src', 'adapter', 'repositories', 'vectorDb', '_shared', '_gen')

  // Remove all file in pathToOutputDirectory first
  fs.readdirSync(pathToOutputDirectory).forEach((file) => {
    fs.unlinkSync(path.join(pathToOutputDirectory, file))
  })

  const entityDefinitions = await getEntityDefinitions(pathToEntitiesDirectory)

  const result = `// This file is generated by scripts/generateInitializeVectorDb.ts
  import { QdrantClient } from '../../../../_shared/QdrantClient'

  export const initializeVectorDb = async (): Promise<void> => {
    const qdrantClient = new QdrantClient()

    const getAllCollectionsResult = await qdrantClient.getCollections()

    ${entityDefinitions
      .map((entityDefinition) => {
        const collectionName = snakeCase(entityDefinition.name)
        const referenceProperties = entityDefinition.properties.filter((property) => property.isReference)

        const createCollectionResult = `await qdrantClient.createCollection('${collectionName}', {
          vectors: {
            size: 1536,
            distance: 'Cosine',
          },
        })`

        const createPayloadIndexResult = referenceProperties
          .map((referenceProperty) => {
            return `await qdrantClient.createPayloadIndex('${collectionName}', {
          field_name: '${referenceProperty.name}',
          field_schema: 'keyword',
          wait: true,
        })`
          })
          .join('\n')

        return `if (!getAllCollectionsResult.collections.find((collection) => collection.name === '${collectionName}')) {
          ${createCollectionResult}
          ${createPayloadIndexResult}
        }`
      })
      .join('\n')}
  }
`

  fs.writeFileSync(path.join(pathToOutputDirectory, `initializeVectorDb.ts`), result)
}

generateInitializeVectorDb().catch((error) => {
  console.error(error)
  process.exit(1)
})
