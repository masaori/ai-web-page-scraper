import path from 'path'
import fs from 'fs'
import { getEntityDefinitions } from 'ast-to-entity-definitions/bin/adapter/entry-points/function'
import { pascalCase } from 'change-case'
import { excludeNull } from '../src/_shared/array'

export const generateInterfaceRepositories = async () => {
  const pathToEntitiesDirectory = path.join(__dirname, '..', 'src', 'domain', 'entities')
  const pathToOutputFile = path.join(__dirname, '..', 'src', 'domain', 'interfaces', '_gen', 'repositories.ts')

  // ${pascalCase(entityDefinition.name)}
  const entityDefinitions = await getEntityDefinitions(pathToEntitiesDirectory)
  const result = `// This file is generated by scripts/generateInterfaceRepositories.ts
  import { PromisedResult, UnknownRuntimeError } from '../../../_shared/error'
  ${entityDefinitions
    .map((entityDefinition) => {
      return `import { ${pascalCase(entityDefinition.name)} } from '../../entities/${pascalCase(entityDefinition.name)}'`
    })
    .join('\n')}

  ${entityDefinitions
    .map((entityDefinition) => {
      return `export interface ${pascalCase(entityDefinition.name)}Repository {
      getAll: () => PromisedResult<${pascalCase(entityDefinition.name)}[], UnknownRuntimeError>
      getRelevant: (text: string, limit: number) => PromisedResult<${pascalCase(entityDefinition.name)}[], UnknownRuntimeError>
      create: (entity: ${pascalCase(entityDefinition.name)}) => PromisedResult<${pascalCase(entityDefinition.name)}, UnknownRuntimeError>
      update: (entity: ${pascalCase(entityDefinition.name)}) => PromisedResult<${pascalCase(entityDefinition.name)}, UnknownRuntimeError>
      delete: (id: string) => PromisedResult<void, UnknownRuntimeError>
      ${excludeNull(
        entityDefinition.properties.map((property) => {
          if (property.isReference) {
            if (property.isUnique) {
              return `getBy${pascalCase(property.name)}: (${pascalCase(property.name)}: ${property.targetEntityDefinitionName}['id']) => PromisedResult<${pascalCase(
                entityDefinition.name,
              )} | null, UnknownRuntimeError>`
            } else {
              return `getAllBy${pascalCase(property.name)}: (${pascalCase(property.name)}: ${property.targetEntityDefinitionName}['id']) => PromisedResult<${pascalCase(
                entityDefinition.name,
              )}[], UnknownRuntimeError>`
            }
          } else if (property.name === 'id') {
            return `getById: (id: string) => PromisedResult<${pascalCase(entityDefinition.name)} | null, UnknownRuntimeError>`
          } else {
            return null
          }
        }),
      ).join('\n')}
    }`
    })
    .join('\n\n')}
  `

  fs.writeFileSync(pathToOutputFile, result)
}

generateInterfaceRepositories().catch((error) => {
  console.error(error)
  process.exit(1)
})
