import path from 'path'
import fs from 'fs'
import { getEntityDefinitions } from 'ast-to-entity-definitions/bin/adapter/entry-points/function'
import { camelCase } from 'change-case'
import { getTypeName } from './_shared/utils'

export const generateFormatInstructions = async () => {
  const pathToEntitiesDirectory = path.join(__dirname, '..', 'src', 'domain', 'entities')
  const pathToOutputDirectory = path.join(__dirname, '..', 'src', 'adapter', 'predictors', '_gen', 'formatInstructions')

  if (!fs.existsSync(pathToOutputDirectory)) {
    throw new Error(`[generateFormatInstructions] pathToOutputDirectory does not exist: ${pathToOutputDirectory}`)
  }
  // Delete all files in pathToOutputDirectory first
  fs.readdirSync(pathToOutputDirectory).forEach((file) => {
    fs.unlinkSync(path.join(pathToOutputDirectory, file))
  })

  const entityDefinitions = await getEntityDefinitions(pathToEntitiesDirectory)

  for (const entityDefinition of entityDefinitions) {
    console.log(`Generating format instruction for ${entityDefinition.name}`)

    const necessaryProperties = entityDefinition.properties.filter((property) => {
      if (property.isReference) {
        return false
      }

      if (property.propertyType === 'string' && property.name === 'id') {
        return false
      }

      if (property.acceptableValues && property.acceptableValues.length > 0) {
        return false
      }

      return true
    })
    const enumProperties = entityDefinition.properties.filter((property) => {
      if (!property.isReference && property.acceptableValues && property.acceptableValues.length > 0) {
        return true
      }
    })

    const result = `// This file is generated by scripts/generateFormatInstructions.ts
    export const ${camelCase(entityDefinition.name)}FormatInstruction = (${necessaryProperties.map((property) => `${camelCase(property.name)}: string`).join(', ')}): string => {
      return \`{
      ${enumProperties.map((property) => `"${camelCase(property.name)}": ${getTypeName(property)},`).join('\n      ')}
      ${necessaryProperties.map((property) => `"${camelCase(property.name)}": ${getTypeName(property)}:\${${camelCase(property.name)}},`).join('\n      ')}
    }\`
  }
  `

    fs.writeFileSync(path.join(pathToOutputDirectory, `${camelCase(entityDefinition.name)}FormatInstruction.ts`), result)
  }
}

generateFormatInstructions().catch((error) => {
  console.error(error)
  process.exit(1)
})
